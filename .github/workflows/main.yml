name: Event Management API CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_ENV: test
  CI: true
  MONGODB_URI: mongodb://localhost:27017/eventmanagement_test
  JWT_SECRET: test_jwt_secret
  REDIS_HOST: localhost
  REDIS_PORT: 6379

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: npm-${{ hashFiles('package-lock.json') }}
        restore-keys: npm-

    - name: Install Dependencies
      run: |
        npm ci
        npm install -g eslint
    
    - name: Run Linter
      run: npm run lint
      continue-on-error: true
    
    - name: Run Tests
      run: npm test
      env:
        NODE_OPTIONS: --max-old-space-size=4096
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      continue-on-error: true
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install Dependencies
      run: npm ci
    
    - name: Run NPM Audit
      run: npm audit --production
      continue-on-error: true

  deploy:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install Dependencies
      run: npm ci --production
    
    - name: Build
      run: npm run build --if-present
      
    - name: Deploy to Render
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
      run: |
        if [ -n "$RENDER_API_KEY" ]; then
          curl -X POST https://api.render.com/v1/deploys \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"service": "${{ secrets.RENDER_SERVICE_ID }}"}'
        else
          echo "Skipping deployment - RENDER_API_KEY not set"
        fi
